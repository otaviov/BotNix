const env = require('../.env')
const Telegraf = require('telegraf')
const Markup = require('telegraf/markup')
const Extra = require('telegraf/extra')
const axios = require('axios')
const bot = new Telegraf(env.token)
const PAYMENT_TOKEN = ''

const botaotabelaVoltar = Extra.markup(Markup.inlineKeyboard([
    Markup.callbackButton('Voltar', 'voltarContinuar'),
    Markup.callbackButton('Voltar para o inÃ­cio', 'btn-voltar'),
    Markup.callbackButton('Encerrar Conversa', 'Encerrar')
], { columns: 2 }))

const botaoAjuda = Extra.markup(Markup.inlineKeyboard([
    Markup.callbackButton('Guia completo', 'btn-guia'),
    Markup.callbackButton('O que sÃ£o bots?', 'btn-bots'),
    Markup.callbackButton('Minha compra Ã© confiÃ¡vel', 'btn-compra'),
    Markup.callbackButton('Meus dados estÃ£o seguros', 'btn-dados'),
    Markup.callbackButton('Como solicitar um Reembolso?', 'btn-reembolso'),
    Markup.callbackButton('FAQ', 'btn-faq'),
    Markup.callbackButton('Voltar', 'btn-voltar')
], {columns: 2}))

const tecladoinicio = Markup.keyboard([
    ['Continuar'],
    ['Ajuda']

]).resize().oneTime().extra()

const botaoContinuar = Markup.keyboard([
    ['Ver tabela'],
    ['PromoÃ§Ãµes da semana'],
    ['Novidades'],
    ['Voltar']

]).resize().oneTime().extra()


const botaoSouN = Extra.markup(Markup.inlineKeyboard([
    Markup.callbackButton('Sim', 's'),
    Markup.callbackButton('NÃ£o', 'n')
], { columns: 2 }))


const produtos = [
    {
        name: 'Item 1',
        price: 20.00,
        description: 'Este item Ã© um teste',
        photoUrl: 'https://www.extra-imagens.com.br/games/acessorios-geek/bonecos-geek/7989219/826683828/boneco-funko-pop-star-wars-darth-vader-11519551.jpg'
    },
    {
        name: 'Item 2',
        price: 50.40,
        description: 'Este item Ã© um teste haha',
        photoUrl: 'https://sm.ign.com/ign_br/screenshot/default/dbz_cevb.jpg'
  }
]

function createInvoice (produtos) {
    return {
        provider_token: PAYMENT_TOKEN,
        start_parameter: 'foo',
        title: produtos.name,
        description: produtos.description,
        currency: 'BRL',
        photo_url: produtos.photoUrl,
        is_flexible: false,
        need_shipping_address: false,
        prices: [{ label: produtos.name, amount: Math.trunc(produtos.price * 100) }],
        payload: {}
    }
}

//INICIO DO BOT
bot.start(async ctx => {
    const nome = ctx.update.message.from.first_name
    await ctx.reply(`Seja bem vindo, ${nome}! ğŸ¥° Eu me chamo Nix-bot, vou te ajudar nas suas compras ok?!`)
    await ctx.replyWithMarkdown(`A qualquer momento, \nvocÃª pode digitar ou clicar no botÃ£o *Ajuda*. VocÃª vai encontrar um guia de ajuda e como fazer o seu pedido e finaliza-lo`)
    await ctx.reply('Podemos continuar?', tecladoinicio)

})

//BOTÃƒO AJUDA
bot.hears(/Ajuda/i, async ctx => {
    await ctx.replyWithMarkdown(`Como posso ajudar?`, botaoAjuda)
})

//GUIA COMPLETO SOBRE O BOT
bot.action('btn-guia', ctx => {
    ctx.editMessageText(`*Aqui ficarÃ¡ meu guia completo*`, botaoAjuda)
})

//O QUE SÃƒO BOTS
bot.action('btn-bots', ctx =>{
    ctx.editMessageText(`Um bot â€“ abreviatura de robÃ´ â€“ Ã© um programa de software que executa tarefas automatizadas, repetitivas e prÃ©-definidas. Os bots normalmente imitam ou substituem o comportamento do usuÃ¡rio humano. Por serem automatizados, operam muito mais rÃ¡pido do que os usuÃ¡rios humanos. Eles realizam funÃ§Ãµes Ãºteis, tais como serviÃ§o ao cliente ou indexaÃ§Ã£o de motores de busca, mas tambÃ©m podem vir sob a forma de malware â€“ usado para obter controle total sobre um computador.`, botaoAjuda)
})

//AJUDA COM A COMPRA
bot.action('btn-compra', ctx => {
    ctx.editMessageText(`Sim, sua compra Ã© confiavel`, botaoAjuda)
})

//AJUDA COM PRIVACIDADE DE DADOS
bot.action('btn-dados', ctx => {
    ctx.editMessageText(`EstÃ£o totalmente seguros`, botaoAjuda)
})

//BotÃ£o DE AJUDA DE PEDIDO DE REEMBOLSO
bot.action('btn-reembolso', ctx => {
    ctx.editMessageText(`Atravez do link vocÃª serÃ¡ direcionado ao atendimento ao cliente, vocÃª deve deixar sua solicitaÃ§Ã£o/reclamaÃ§Ã£o de reembolso. Ele serÃ¡ analizado e dentro de algumas horas o adm entrarÃ¡ em contado com vocÃª`, botaoAjuda)
})

//BotÃ£o FAQ
bot.action('btn-faq', ctx => {
    ctx.editMessageText(`Aqui ficarÃ¡ perguntas e respostas...`, botaoAjuda)
})

//BotÃ£o voltar inline (INICIO)
bot.action('btn-voltar', ctx => {
    ctx.replyWithMarkdown(`Voltando para o menu de inicio, clique em continuar ğŸ¥°`, tecladoinicio)
})

//Menu continuar
bot.hears(/Continuar/i, async ctx =>{
    await ctx.replyWithMarkdown(`Estou tÃ£o feliz com seu interesse ğŸ¤­ EntÃ£o... O que vocÃª vai querer hoje?`)
    await ctx.replyWithMarkdown(`Escolha e clique em uma das opÃ§Ãµes: `,botaoContinuar)
})

//BotÃ£o voltar (INICIO)
bot.hears(/Voltar/i, ctx =>{
    ctx.reply(`Voltando... ğŸ¤­ `, tecladoinicio)
})

//Tabelas
bot.hears(/Ver tabela/i, async ctx => {
    await ctx.reply('Vou te enviar minha tabela ğŸ”¥')
    await ctx.replyWithPhoto({source: `${__dirname}/imagens/imgTest.jpg`})
    await ctx.replyWithMarkdown(`*Proxima tabela*`)
    await ctx.reply(`Deseja iniciar seu pedido?`, botaoSouN)

})

//promoÃ§oes da semana
bot.hears(/PromoÃ§Ãµes da semana/i, async ctx => {
    await ctx.replyWithMarkdown(`*Aqui ficarÃ¡ as promoÃ§Ãµes da semana*`, botaoContinuar)
})

//Tabela de novidades
bot.hears(/Novidades/i, async ctx => {
    await ctx.replyWithMarkdown(`*Aqui ficarÃ¡ as Novidades da semana*`, botaoContinuar)
})

//BotÃ£o sim para compra
bot.action('s', ({ replyWithMarkdown }) => replyWithMarkdown(`
Escolha seu item ğŸ˜ˆ
${produtos.reduce((acc, p) => {
    return (acc += `*${p.name}* - ${p.price} R$\n`)
    }, '')}    
EntÃ£o... o que vai querer hoje?`,
    Markup.keyboard(produtos.map(p => p.name)).oneTime().resize().extra()
))

produtos.forEach(p => {
    bot.hears(p.name, (ctx) => {
        console.log(`${ctx.from.first_name} estÃ¡ prestes a comprar um ${p.name}.`);
        ctx.replyWithInvoice(createInvoice(p))
    })
})

bot.on('pre_checkout_query', ({ answerPreCheckoutQuery }) => answerPreCheckoutQuery(true))

bot.on('Pagamento feito', (ctx) => {
    console.log(`${ctx.from.first_name} (${ctx.from.username}) just payed ${ctx.message.successful_payment.total_amount / 100} R$.`)
})
//finalizando pagamento

//nÃ£o para compra
bot.action('n', async ctx =>{
    await ctx.replyWithMarkdown('Ok')
    await ctx.replyWithMarkdown(`O que deseja?`, botaotabelaVoltar)
})

//Voltar para o menu continuar
bot.action('voltarContinuar', ctx => {
    ctx.reply(`Voltando para o menu continuar`, botaoContinuar)
})

//Encerrando chat
bot.action('Encerrar', async ctx =>{
    await ctx.reply('Foi um prazer conversar com vocÃª :) ')

})




bot.startPolling()
